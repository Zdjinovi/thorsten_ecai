(define (domain prob_domain) 
 (:requirements :strips :probabilistic-effects :conditional-effects) 
 (:constants MS XW WB QS LO VN NF JT RQ WQ )
 (:predicates 
	 (CO ?X ?Y ) 
	 (PR ?X ?Y ) 
	 (YN ?X ?Y ) 
	 (HN ?X ?Y ) 
	 (IQ ?X ?Y ) 
(clear)
(not-clear)
 )
(:action RYV
 :parameters (?X ?Y )
 :precondition (and 
		 (YN ?X ?Y) 
		 (YN ?X ?X) 
		 (PR ?X ?Y) 
  )
 :effect (probabilistic 
		 13/100 (and (HN ?X ?X) (YN ?Y ?Y) )  
		 28/100 (and (not (YN ?X ?Y)) (CO ?Y ?X) )  
		 36/100 (and (not (YN ?X ?X)) (IQ ?X ?X) (PR ?Y ?X) (CO ?Y ?Y) )  
		 23/100 (and (not (PR ?X ?Y)) )  
          )
 )
(:action QHX
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (YN ?Y ?X) 
		 (CO ?Z ?Y) 
		 (IQ ?X ?Z) 
		 (PR ?Z ?Y) 
		 (PR ?X ?Z) 
  )
 :effect (probabilistic 
		 62/100 (and (not (PR ?X ?Z)) (not (CO ?Z ?Y)) (PR ?Z ?Z) )  
		 38/100 (and (CO ?Y ?X) (HN ?X ?Y) (not (CO ?Z ?Y)) (IQ ?Y ?Y) )  
          )
 )
(:action PZL
 :parameters (?X ?Y )
 :precondition (and 
		 (HN ?Y ?Y) 
		 (IQ ?X ?X) 
		 (PR ?Y ?Y) 
		 (HN ?X ?X) 
		 (CO ?Y ?Y) 
  )
 :effect (probabilistic 
		 47/100 (and (CO ?X ?Y) (not (IQ ?X ?X)) (YN ?X ?X) )  
		 23/100 (and (YN ?X ?Y) (not (HN ?X ?X)) )  
		 2/100 (and (YN ?X ?Y) (not (HN ?Y ?Y)) )  
		 20/100 (and (not (PR ?Y ?Y)) )  
		 8/100 (and (not (PR ?Y ?Y)) (YN ?Y ?X) (YN ?X ?Y) )  
          )
 )
(:action DXE
 :parameters (?X ?Y ?Z )
 :precondition (and 
		 (PR ?X ?Y) 
		 (YN ?Y ?X) 
  )
 :effect (probabilistic 
		 62/100 (and (not (YN ?Y ?X)) (CO ?X ?Z) (PR ?Z ?X) )  
		 14/100 (and (not (YN ?Y ?X)) (IQ ?X ?Z) )  
		 23/100 (and (CO ?Y ?X) (HN ?Z ?Z) )  
		 1/100 (and (not (YN ?Y ?X)) (not (PR ?X ?Y)) )  
          )
 )
(:action ATM
 :parameters (?X ?Y )
 :precondition (and 
		 (IQ ?X ?X) 
  )
 :effect (probabilistic 
		 78/100 (and (YN ?Y ?X) (HN ?X ?X) )  
		 9/100 (and (not (IQ ?X ?X)) )  
		 7/100 (and (HN ?X ?Y) (not (IQ ?X ?X)) )  
		 0/100 (and (PR ?Y ?Y) (not (IQ ?X ?X)) )  
		 2/100 (and (not (IQ ?X ?X)) (PR ?X ?X) )  
		 4/100 (and (YN ?X ?Y) (YN ?Y ?X) )  
          )
 )
(:action reset1 
 :precondition (not-clear)
 :effect (and 
	     (forall (?x) (and 
      (not (CO ?x MS)) 
      (not (CO ?x XW)) 
      (not (CO ?x WB)) 
      (not (CO ?x QS)) 
      (not (CO ?x LO)) 
      (not (CO ?x VN)) 
      (not (CO ?x NF)) 
      (not (CO ?x JT)) 
      (not (CO ?x RQ)) 
      (not (CO ?x WQ)) 
      (not (PR ?x MS)) 
      (not (PR ?x XW)) 
      (not (PR ?x WB)) 
      (not (PR ?x QS)) 
      (not (PR ?x LO)) 
      (not (PR ?x VN)) 
      (not (PR ?x NF)) 
      (not (PR ?x JT)) 
      (not (PR ?x RQ)) 
      (not (PR ?x WQ)) 
      (not (YN ?x MS)) 
      (not (YN ?x XW)) 
      (not (YN ?x WB)) 
      (not (YN ?x QS)) 
      (not (YN ?x LO)) 
      (not (YN ?x VN)) 
      (not (YN ?x NF)) 
      (not (YN ?x JT)) 
      (not (YN ?x RQ)) 
      (not (YN ?x WQ)) 
      (not (HN ?x MS)) 
      (not (HN ?x XW)) 
      (not (HN ?x WB)) 
      (not (HN ?x QS)) 
      (not (HN ?x LO)) 
      (not (HN ?x VN)) 
      (not (HN ?x NF)) 
      (not (HN ?x JT)) 
      (not (HN ?x RQ)) 
      (not (HN ?x WQ)) 
      (not (IQ ?x MS)) 
      (not (IQ ?x XW)) 
      (not (IQ ?x WB)) 
      (not (IQ ?x QS)) 
      (not (IQ ?x LO)) 
      (not (IQ ?x VN)) 
      (not (IQ ?x NF)) 
      (not (IQ ?x JT)) 
      (not (IQ ?x RQ)) 
      (not (IQ ?x WQ)) 
))
(not (not-clear))
(clear)))

(:action reset2 
 :precondition (clear) 
 :effect (and (not-clear)
              (not (clear))
(YN QS WB) 
(IQ QS MS) 
(PR WB WQ) 
(IQ NF XW) 
(IQ JT NF) 
(YN WB WB) 
(HN VN NF) 
(HN XW JT) 
(IQ NF WQ) 
(CO RQ WQ) 
(PR VN LO) 
(CO VN RQ) 
(PR RQ MS) 
(YN WB NF) 
(IQ WQ NF) 
(YN NF RQ) 
(PR WQ LO) 
(IQ MS JT) 
(IQ WQ QS) 
(HN NF QS) 
(IQ MS WQ) 
(IQ VN NF) 
(YN QS LO) 
(IQ XW RQ) 
(YN WB WQ) 
(HN XW VN) 
)))
